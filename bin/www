#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('background:server');
var http = require('http');

// var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3389');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);
//socket部分
/*在线人员*/
var onLineUsers = {};
/* 在线人数*/
var onLineCounts = 0;

/*io监听到存在链接，此时回调一个socket进行socket监听*/
io.on('connection', function (socket) {
  console.log('a user connected');
  /*监听新用户加入*/
  socket.on('login', function (user) {
    "use strict";
    /*监听到有用户发消息，将该消息广播给所有客户端*/
    socket.name = user.userId;
    /*不存在则加入 */
    if (!onLineUsers.hasOwnProperty(user.userId)) {
      //不存在则加入
      onLineUsers[user.userId] = user.userName;
      onLineCounts++;
    }
    /*一个用户新加入，向所有客户端监听login的socket的实例发送响应，响应内容为一个对象*/
    io.emit('login', {
      onLineUsers: onLineUsers,
      onLineCounts: onLineCounts,
      user: user
    });
  });
  /*监听用户退出聊天室*/
  socket.on('disconnect', function () {
    "use strict";
    if (onLineUsers.hasOwnProperty(socket.name)) {
      var user = {
        userId: socket.name,
        userName: onLineUsers[socket.name]
      };
      delete onLineUsers[socket.name];
      onLineCounts--;

      /*向所有客户端广播该用户退出群聊*/
      io.emit('logout', {
        onLineUsers: onLineUsers,
        onLineCounts: onLineCounts,
        user: user
      });
      console.log(user.userName, "退出群聊");
    }
  })
  /*监听到用户发送了消息，就使用io广播信息，信息被所有客户端接收并显示。注意，如果客户端自己发送的也会接收到这个消息，故在客户端应当存在这的判断，是否收到的消息是自己发送的，故在emit时，应该将用户的id和信息封装成一个对象进行广播*/
  socket.on('message', function (obj) {
    "use strict";
    /*监听到有用户发消息，将该消息广播给所有客户端*/
    io.emit('message', obj);
  });

  socket.on('chessclick', function (obj) {
    "use strict";
    if(obj.length%2==0){
      obj.type = true;
    }else{
      obj.type = false;
    }
    io.emit('chessclick', obj);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}